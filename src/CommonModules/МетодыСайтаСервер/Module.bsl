#Область ПрограммныйИнтерфейс

Процедура СформироватьIndex() Экспорт
	
	МассивКниг 	= Новый Массив;	
	Запрос 		= Новый Запрос(
		"ВЫБРАТЬ
		|	Произведения.Код КАК Код,
		|	Произведения.Наименование КАК Наименование,
		|	Произведения.Автор.Имя КАК АвторИмя,
		|	Произведения.Автор.Фамилия КАК АвторФамилия
		|ИЗ
		|	Справочник.Произведения КАК Произведения
		|ГДЕ
		|	Произведения.НаСайте = ИСТИНА");
	
	ВыборкаДетальныеЗаписи 	= Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураКниги = Новый Структура;
		СтруктураКниги.Вставить("title"		, ВыборкаДетальныеЗаписи.Наименование);
		СтруктураКниги.Вставить("name"		, ВыборкаДетальныеЗаписи.АвторИмя);
		СтруктураКниги.Вставить("surname"	, ВыборкаДетальныеЗаписи.АвторФамилия);
		СтруктураКниги.Вставить("url"		, "/book?id=" + ВыборкаДетальныеЗаписи.Код);
		
		МассивКниг.Добавить(СтруктураКниги);
		
	КонецЦикла;
	
	ИнструментарийВызовСервера.JSONВФайл(МассивКниг, Справочники.Сайты.Athenaeum.ПапкаДанныхСайта + "\search.json"); 
		
КонецПроцедуры

Процедура СформироватьДанные(Знач ОбновлятьКартинкиЦеликом = Ложь, Знач Книга = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Книга) Тогда
		Книга = Справочники.Произведения.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Люди.Имя КАК АвторИмя,
		|	Люди.Фамилия КАК АвторФамилия,
		|	Люди.Код КАК АвторКод,
		|	Люди.Ссылка КАК Ссылка,
		|	Люди.ДР КАК ДР
		|ПОМЕСТИТЬ ВТ_Авторы
		|ИЗ
		|	Справочник.Произведения КАК Произведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Люди КАК Люди
		|		ПО Произведения.Автор = Люди.Ссылка
		|ГДЕ
		|	Произведения.НаСайте = ИСТИНА
		|	И ВЫБОР
		|			КОГДА НЕ &Книга = ЗНАЧЕНИЕ(Справочник.Произведения.ПустаяСсылка)
		|				ТОГДА Произведения.Ссылка = &Книга
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Произведения.Наименование КАК Наименование,
		|	Произведения.Код КАК Код,
		|	ВТ_Авторы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Книги
		|ИЗ
		|	ВТ_Авторы КАК ВТ_Авторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Произведения КАК Произведения
		|		ПО ВТ_Авторы.Ссылка = Произведения.Автор
		|			И (Произведения.НаСайте = ИСТИНА)
		|ГДЕ
		|	Произведения.НаСайте = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛюдиАбзацы.Ссылка КАК Ссылка,
		|	ЛюдиАбзацы.Заголовок КАК Заголовок,
		|	ЛюдиАбзацы.Содержание КАК Содержание
		|ПОМЕСТИТЬ Авторы
		|ИЗ
		|	ВТ_Авторы КАК ВТ_Авторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Люди.Абзацы КАК ЛюдиАбзацы
		|		ПО ВТ_Авторы.Ссылка = ЛюдиАбзацы.Ссылка");
	
	Запрос.УстановитьПараметр("Книга", Книга);
	РезультатЗапроса 		= Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ОсновнойКаталог 		= Справочники.Сайты.Athenaeum.ПапкаДанныхСайта;
	
	СформироватьАвторов(РезультатЗапроса[0], РезультатЗапроса[1], РезультатЗапроса[2], ОсновнойКаталог, ОбновлятьКартинкиЦеликом);
	
КонецПроцедуры

Процедура СформироватьКниги(Знач ОбновитьСтарше, Знач ОбновлятьКартинкиЦеликом = Ложь, Знач Книга = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Книга) Тогда
		Книга = Справочники.Произведения.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ
		|	Произведения.Ссылка КАК Ссылка,
		|	Произведения.Наименование КАК Наименование,
		|	Произведения.Автор.Имя КАК Имя,
		|	Произведения.Автор.Фамилия КАК Фамилия,
		|	Произведения.Код КАК Код,
		|	Произведения.Описание КАК Описание,
		|	ЕСТЬNULL(ОбновлениеДанныхКниг.ДатаОбновления, НЕОПРЕДЕЛЕНО) КАК ДатаОбновления,
		|	Произведения.Автор.Код КАК АвторКод
		|ИЗ
		|	Справочник.Произведения КАК Произведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбновлениеДанныхКниг КАК ОбновлениеДанныхКниг
		|		ПО (ОбновлениеДанныхКниг.Произведение = Произведения.Ссылка)
		|			И (ОбновлениеДанныхКниг.ДатаОбновления > &ДатаОбновления)
		|ГДЕ
		|	Произведения.НаСайте = ИСТИНА
		|	И ВЫБОР
		|			КОГДА НЕ &Книга = ЗНАЧЕНИЕ(Справочник.Произведения.ПустаяСсылка)
		|				ТОГДА Произведения.Ссылка = &Книга
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ДатаОбновления"	, ?(ЗначениеЗаполнено(ОбновитьСтарше), ОбновитьСтарше, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Книга"			, Книга);
	
	ВыборкаДетальныеЗаписи 	= Запрос.Выполнить().Выбрать();	
	КаталогСайта 			= Справочники.Сайты.Athenaeum.ПапкаДанныхСайта;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаОбновления) Тогда
		
			ПутьККниге		= КаталогСайта + "\books\" + ВыборкаДетальныеЗаписи.Ссылка.Код;
			КаталогКниги 	= Новый Файл(ПутьККниге);
			
			Если Не КаталогКниги.Существует() Тогда
				СоздатьКаталог(ПутьККниге);
			КонецЕсли;
			
			Если ОбновлятьКартинкиЦеликом Тогда
				Попытка
					ТекущееПроизведение 					= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ДД										= Новый ДвоичныеДанные(ВыборкаДетальныеЗаписи.Ссылка.Картинка);
					ТекущееПроизведение.КартинкаДвоичные 	= Новый ХранилищеЗначения(ДД);
					ТекущееПроизведение.Записать();
				Исключение КонецПопытки;
			КонецЕсли;

			
			ДД 	= ВыборкаДетальныеЗаписи.Ссылка.КартинкаДвоичные.Получить();
						
			Если Не ЗначениеЗаполнено(ДД) Тогда
				
				Картинка = Новый Файл(ВыборкаДетальныеЗаписи.Ссылка.Картинка);
				
				Если Картинка.Существует() Тогда
					КопироватьФайл(Картинка.ПолноеИмя, КаталогКниги.ПолноеИмя + "\0.webp");
				КонецЕсли;
				
			Иначе
				
				ДД.Записать(КаталогКниги.ПолноеИмя + "\0.webp");
				
			КонецЕсли;
			
			МетодыОбработкиИзображений.СоздатьКарточки(КаталогКниги.ПолноеИмя + "\0.webp");
			
			СтруктураКниги = Новый Структура;
			СтруктураКниги.Вставить("title"			, ВыборкаДетальныеЗаписи.Наименование);
			СтруктураКниги.Вставить("author"		, ВыборкаДетальныеЗаписи.Имя + " " + ВыборкаДетальныеЗаписи.Фамилия);
			СтруктураКниги.Вставить("description"	, СтрЗаменить(ВыборкаДетальныеЗаписи.Описание, Символы.ПС, "<br/>"));
			СтруктураКниги.Вставить("id"			, ВыборкаДетальныеЗаписи.Код);
			СтруктураКниги.Вставить("author_id"		, ВыборкаДетальныеЗаписи.АвторКод);
			
			ИнструментарийВызовСервера.JSONВФайл(СтруктураКниги, ПутьККниге + "\data.json"); 
			
			Движение 					= РегистрыСведений.ОбновлениеДанныхКниг.СоздатьМенеджерЗаписи();
			Движение.Произведение 		= ВыборкаДетальныеЗаписи.Ссылка;
			Движение.ДатаОбновления 	= ТекущаяДатаСеанса();
			Движение.Записать(Истина);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьСайтмап() Экспорт
	
	Дата = Формат(УниверсальноеВремя(ТекущаяДатаСеанса()), "ДФ=yyyy-MM-ddThh:mm:ss+00:00");
	
	Текст = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<urlset
    |xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9""
    |xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	|>";
	
	Запрос 	= Новый Запрос(ПолучитьСписокСтраниц());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Текст = Текст 
			+ Символы.ПС
			+ "<url>"
			+ Символы.ПС
			+ "<loc>"
			+ Выборка.URL
			+ "</loc>"
			+ Символы.ПС
			+ "<lastmod>"
			+ Дата
			+ "</lastmod>"
			+ Символы.ПС
			+ "</url>";
			
	КонецЦикла;
	
	Текст = Текст + "</urlset>";
	
	Сайтмап = Новый ТекстовыйДокумент;
	Сайтмап.ДобавитьСтроку(Текст);
	Сайтмап.Записать(Справочники.Сайты.Athenaeum.КореньСайта + "sitemap.xml");
		
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьАвторов(Знач ПакетАвторы, Знач ПакетПроизведения, Знач ПакетОписаний, Знач ОсновнойКаталог, Знач ОбновлятьКартинкиЦеликом = Ложь)
	
	МассивАвторов 			= Новый Массив;
	ВыборкаДетальныеЗаписи 	= ПакетАвторы.Выбрать();
	Описания				= ПакетОписаний.Выгрузить();
	Произведения 			= ПакетПроизведения.Выгрузить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КаталогАвтора 		= Новый Файл(ОсновнойКаталог + "\authors\" + ВыборкаДетальныеЗаписи.АвторКод);
		ВерсткаБио 			= Новый ТекстовыйДокумент;
		Отбор 				= Новый Структура("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураКниги 		= Новый Структура;
		СтруктураАвтора 	= Новый Структура;
		ТекущиеОписания 	= Описания.НайтиСтроки(Отбор);
		ТекущиеПроизведения = Произведения.НайтиСтроки(Отбор);
		
		Если Не КаталогАвтора.Существует() Тогда
			СоздатьКаталог(КаталогАвтора.ПолноеИмя);
		КонецЕсли;
		
		Если ОбновлятьКартинкиЦеликом Тогда
			Попытка
				ТекущийАвтор 					= ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				ДД								= Новый ДвоичныеДанные(ВыборкаДетальныеЗаписи.Ссылка.Портрет);
				ТекущийАвтор.КартинкаДвоичные 	= Новый ХранилищеЗначения(ДД);
				ТекущийАвтор.Записать();
			Исключение КонецПопытки;
		КонецЕсли;

		
		ДД 	= ВыборкаДетальныеЗаписи.Ссылка.КартинкаДвоичные.Получить();
					
		Если Не ЗначениеЗаполнено(ДД) Тогда
			
			Портрет	= Новый Файл(ВыборкаДетальныеЗаписи.Ссылка.Портрет);
			
			Если Портрет.Существует() Тогда
				КопироватьФайл(Портрет.ПолноеИмя, КаталогАвтора.ПолноеИмя + "\0.webp");
			КонецЕсли;

			
		Иначе
			
			ДД.Записать(КаталогАвтора.ПолноеИмя + "\0.webp");
			
		КонецЕсли;
		

		СтруктураКниги.Вставить("name"		, ВыборкаДетальныеЗаписи.АвторИмя);
		СтруктураКниги.Вставить("surname"	, ВыборкаДетальныеЗаписи.АвторФамилия);
		СтруктураКниги.Вставить("url"		, "/author?id=" + ВыборкаДетальныеЗаписи.АвторКод);
		
		
		СтруктураАвтора.Вставить("author"	, ВыборкаДетальныеЗаписи.АвторИмя + " " + ВыборкаДетальныеЗаписи.АвторФамилия);
		СтруктураАвтора.Вставить("date"		, Формат(ВыборкаДетальныеЗаписи.ДР,"ДЛФ=DD"));
					
		Для Каждого ОписаниеАвтора Из ТекущиеОписания Цикл	
			ВерсткаБио.ДобавитьСтроку("<h4>" + ОписаниеАвтора.Заголовок + ":</h4>");
			ВерсткаБио.ДобавитьСтроку("<p>" + ОписаниеАвтора.Содержание + "</p>");		
		КонецЦикла;
				
		Если Не ТекущиеПроизведения.Количество() = 0 Тогда
			ВерсткаБио.ДобавитьСтроку("<h4>Произведения:</h4><div class=""books-list"">");
		КонецЕсли;
		
		Для Каждого ПроизведениеАвтора Из ТекущиеПроизведения Цикл		
			ВерсткаБио.ДобавитьСтроку("<a href=""/book?id="+ ПроизведениеАвтора.Код +""" class=""list-group-item list-group-item-action""><div class=""result""><span class=""oi oi-book result-oi""></span><span class=""result-text"">" + ПроизведениеАвтора.Наименование + "</span></div></a>")
		КонецЦикла;

		 Если Не ТекущиеПроизведения.Количество() = 0 Тогда
			ВерсткаБио.ДобавитьСтроку("</div>");
		КонецЕсли;

		ИнструментарийВызовСервера.JSONВФайл(СтруктураАвтора, КаталогАвтора.ПолноеИмя + "\data.json"); 
		ВерсткаБио.Записать(КаталогАвтора.ПолноеИмя + "\description.html");
		МассивАвторов.Добавить(СтруктураКниги);	
		
	КонецЦикла;
	
	ИнструментарийВызовСервера.JSONВФайл(МассивАвторов, ОсновнойКаталог + "\authors.json"); 
	            
КонецПроцедуры

Функция ПолучитьСписокСтраниц() Экспорт
	
		Возврат	"ВЫБРАТЬ
		       	|	""https://athenaeum.digital/book?id="" + Произведения.Код КАК URL,
		       	|	Произведения.Автор КАК Автор
		       	|ПОМЕСТИТЬ Произведения
		       	|ИЗ
		       	|	Справочник.Произведения КАК Произведения
		       	|ГДЕ
		       	|	Произведения.НаСайте = ИСТИНА
		       	|;
		       	|
		       	|////////////////////////////////////////////////////////////////////////////////
		       	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		       	|	""https://athenaeum.digital/author?id="" + Произведения.Автор.Код КАК URL
		       	|ПОМЕСТИТЬ Авторы
		       	|ИЗ
		       	|	Произведения КАК Произведения
		       	|;
		       	|
		       	|////////////////////////////////////////////////////////////////////////////////
		       	|ВЫБРАТЬ
		       	|	Произведения.URL КАК URL
		       	|ИЗ
		       	|	Произведения КАК Произведения
		       	|
		       	|ОБЪЕДИНИТЬ ВСЕ
		       	|
		       	|ВЫБРАТЬ
		       	|	Авторы.URL
		       	|ИЗ
		       	|	Авторы КАК Авторы
		       	|
		       	|ОБЪЕДИНИТЬ ВСЕ
		       	|
		       	|ВЫБРАТЬ
		       	|	СтандартныеСтраницы.Наименование
		       	|ИЗ
		       	|	Справочник.СтандартныеСтраницы КАК СтандартныеСтраницы";
	
КонецФункции

#КонецОбласти
