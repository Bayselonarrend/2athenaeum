#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьТест(Запрос, Метод) Экспорт
    
    Попытка
        
        Если Не ЗначенияПовтИсп.КэшируемыеЗначенияКонстант("ЗаписыватьТесты") Тогда
            Возврат;
        КонецЕсли;
        
        UID = Строка(Новый УникальныйИдентификатор);
        
        НовыйТест = Справочники.АвтотестыСервисов.СоздатьЭлемент();
        НовыйТест.Код                    = UID;
        НовыйТест.Наименование           = "Тест " + UID;
        НовыйТест.ВходнойJSON            = Запрос.ПолучитьТелоКакСтроку();
        НовыйТест.ХранилищеЗаголовков    = Новый ХранилищеЗначения(Запрос.Заголовки);
        НовыйТест.ХранилищеПараметров    = Новый ХранилищеЗначения(Запрос.ПараметрыЗапроса);
        НовыйТест.Метод                  = Метод;
        НовыйТест.URL                    = Запрос.БазовыйURL + Запрос.ОтносительныйURL;
        НовыйТест.Записать();
        
    Исключение
        ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура ЗапускТеста(Тест, UIDГруппы = "") Экспорт
    
    РеквизитыТеста  = ИнструментарийВызовСервера.ЗначенияРеквизитовОбъекта(Тест, "ВходнойJSON,Метод,URL,Определитель");
    JSONЗапроса     = РеквизитыТеста.ВходнойJSON;
    URL             = РеквизитыТеста.URL;
    UID             = Строка(Новый УникальныйИдентификатор);
    Определитель    = РеквизитыТеста.Определитель;
    ДопПараметры    = Новый Соответствие;
    Ошибка          = "";
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |    АвтотестыСервисовЗаменяемыеПараметры.Параметр КАК Параметр,
        |    АвтотестыСервисовЗаменяемыеПараметры.Значение КАК Значение
        |ИЗ
        |    Справочник.АвтотестыСервисов.ЗаменяемыеПараметры КАК АвтотестыСервисовЗаменяемыеПараметры
        |ГДЕ
        |    АвтотестыСервисовЗаменяемыеПараметры.Ссылка = &Тест";
    
    Запрос.УстановитьПараметр("Тест", Тест);
    
    РезультатЗапроса         = Запрос.Выполнить();    
    ВыборкаДетальныеЗаписи   = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        JSONЗапроса = СтрЗаменить(JSONЗапроса, "@" + ВыборкаДетальныеЗаписи.Параметр, ВыборкаДетальныеЗаписи.Значение);  
    КонецЦикла;
    
    Попытка
                
        Заголовки            = Тест.ХранилищеЗаголовков.Получить();    
        ПараметрыЗапроса     = Новый Соответствие(Тест.ХранилищеПараметров.Получить());    
		ВыполнитьПредобработку(Определитель, JSONЗапроса, ПараметрыЗапроса, ДопПараметры);
        
        Ответ     = МетодыРаботыHttp.ЗапросПоПараметрамСервиса(Заголовки, ПараметрыЗапроса, URL, JSONЗапроса);
		ИнструментарийВызовСервера.Ожидание(2);
        Пройден   = ВыполнитьПостОбработку(Определитель, Ответ, ДопПараметры);
        
    Исключение
        
        Пройден = Ложь;
        Ошибка  = ОписаниеОшибки();
        
    КонецПопытки;
    
    МЗ = РегистрыСведений.ВыполнениеТестов.СоздатьМенеджерЗаписи();
    МЗ.Период        = ТекущаяДатаСеанса();
    МЗ.UID           = UID;
    МЗ.UIDГруппы     = UIDГруппы;
    МЗ.Тест          = Тест;
    МЗ.Пройден       = Пройден;
    МЗ.Ошибка        = Ошибка;
    МЗ.Записать(Истина);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОсновныеМетоды

Процедура ВыполнитьПредобработку(Знач Определитель, ТелоЗапроса, ПараметрыЗапроса, ДопПараметры)
    
    ОТ = Справочники.ОпределителиТестов;
    
    Если Определитель = ОТ.РегистрацияТелеграм  Тогда        
        РегистрацияТелеграм_Пред(ТелоЗапроса, ДопПараметры);
        
    ИначеЕсли Определитель = ОТ.ВходТелеграм Тогда
        ВходТелеграм_Пред(ТелоЗапроса, ДопПараметры);
		
    ИначеЕсли Определитель = ОТ.РегистрацияВК Тогда
        РегистрацияВК_Пред(ПараметрыЗапроса, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.ВходВК Тогда
		ВходВК_Пред(ПараметрыЗапроса, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.РегистрацияКнигаТелеграм Тогда
		РегистрацияКнигаТелеграм_Пред(ТелоЗапроса, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.РегистрацияКнигаВК Тогда
		РегистрацияКнигаВК_Пред(ПараметрыЗапроса, ДопПараметры);

	ИначеЕсли Определитель = ОТ.КнигаПоКодуВК Тогда
		КнигаПоКодуВК_Пред(ТелоЗапроса, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.КнигаПоКодуТелеграм Тогда
		КнигаПоКодуТелеграм_Пред(ТелоЗапроса, ДопПараметры);
		
    Иначе
        Возврат;
    КонецЕсли;
        
КонецПроцедуры

Функция ВыполнитьПостобработку(Знач Определитель, Ответ, ДопПараметры)
    
    ОТ      = Справочники.ОпределителиТестов;
    Пройден = Ложь;
    
    Если Определитель = ОТ.РегистрацияТелеграм  Тогда
        Пройден = РегистрацияТелеграм_Пост(Ответ, ДопПараметры);
        
    ИначеЕсли Определитель = ОТ.ВходТелеграм  Тогда
        Пройден = ВходТелеграм_Пост(Ответ, ДопПараметры);
		
    ИначеЕсли Определитель = ОТ.РегистрацияВК  Тогда
        Пройден = РегистрацияВК_Пост(Ответ, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.ВходВК Тогда
		Пройден = ВходВК_Пост(Ответ, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.РегистрацияКнигаТелеграм Тогда
		Пройден = РегистрацияКнигаТелеграм_Пост(Ответ, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.РегистрацияКнигаВК Тогда
		Пройден = РегистрацияКнигаВК_Пост(Ответ, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.КнигаПоКодуВК  Тогда
		Пройден = КнигаПоКодуВК_Пост(Ответ, ДопПараметры);
		
	ИначеЕсли Определитель = ОТ.КнигаПоКодуТелеграм Тогда
		Пройден = КнигаПоКодуТелеграм_Пост(Ответ, ДопПараметры);
		
    Иначе
        Пройден = Истина;
    КонецЕсли;
    
    Возврат Пройден;
    
КонецФункции

#КонецОбласти

#Область МетодыПредобработки

Процедура РегистрацияТелеграм_Пред(ТелоЗапроса, ДопПараметры)
    
    Актор = Справочники.Пользователи.ЭтотПользователь;
    
    ПользовательТестирования = Актор.ПолучитьОбъект();
    
    ДопПараметры.Вставить("Telegram", ПользовательТестирования.Telegram);
    
    ПользовательТестирования.Telegram = "";
    ПользовательТестирования.Записать();
	
	ТелоДвоичное    = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса, "UTF-8");
    СтруктураТела   = МетодыРаботыHttp.JsonВСтруктуру(ТелоДвоичное, "UTF-8");
    
    Печенька = СтруктураТела["message"]["text"];
    Печенька = СтрЗаменить(Печенька, "/start ", "");
    
    ДопПараметры.Вставить("Печенька", Печенька);
    
КонецПроцедуры

Процедура ВходТелеграм_Пред(ТелоЗапроса, ДопПараметры)

    ТелоДвоичное    = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса, "UTF-8");
    СтруктураТела   = МетодыРаботыHttp.JsonВСтруктуру(ТелоДвоичное, "UTF-8");
    
    Печенька = СтруктураТела["message"]["text"];
    Печенька = СтрЗаменить(Печенька, "/start ", "");
    
    ДопПараметры.Вставить("Печенька", Печенька);
    
КонецПроцедуры

Процедура РегистрацияВК_Пред(ПараметрыЗапроса, ДопПараметры)
	
    Актор = Справочники.Пользователи.ЭтотПользователь;
    
    ПользовательТестирования = Актор.ПолучитьОбъект();
	
	ПараметрыЗапроса.Вставить("code", ПользовательТестирования.VK); 
    ДопПараметры.Вставить("VK", ПользовательТестирования.VK);
    
    ПользовательТестирования.VK = "";
    ПользовательТестирования.Записать();

	Печенька = ПараметрыЗапроса["uuid"];
	ДопПараметры.Вставить("Печенька", Печенька);

КонецПроцедуры

Процедура ВходВК_Пред(ПараметрыЗапроса, ДопПараметры)
	
	Актор 	= Справочники.Пользователи.ЭтотПользователь;
	ВК		= ИнструментарийВызовСервера.ЗначениеРеквизитаОбъекта(Актор, "VK");
	
	ПараметрыЗапроса.Вставить("code", ВК); 

	Печенька = ПараметрыЗапроса["uuid"];
	ДопПараметры.Вставить("Печенька", Печенька);

КонецПроцедуры

Процедура РегистрацияКнигаТелеграм_Пред(ТелоЗапроса, ДопПараметры)
	
	Актор = Справочники.Пользователи.ЭтотПользователь;
    
    ПользовательТестирования = Актор.ПолучитьОбъект();
    
    ДопПараметры.Вставить("Telegram", ПользовательТестирования.Telegram);
    
    ПользовательТестирования.Telegram = "";
    ПользовательТестирования.Записать();

	ТелоДвоичное    = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса, "UTF-8");
	СтруктураТела   = МетодыРаботыHttp.JsonВСтруктуру(ТелоДвоичное, "UTF-8");
	
	Печенька = СтруктураТела["message"]["text"];
	Печенька = СтрЗаменить(Печенька, "/start ", "");
	
	Если СтрНайти(Печенька, "_")  > 0 Тогда
		
		МассивЗапрос    = СтрРазделить(Печенька, "_", Истина);
		Печенька        = МассивЗапрос[0];
		КодКниги        = МассивЗапрос[1];
		
	Иначе
		
		ВызватьИсключение "Не найден код книги";
		
	КонецЕсли;
	
	ЗапрашиваемыйТекст = Справочники.Произведения.НайтиПоКоду(вРег(КодКниги));
	ДопПараметры.Вставить("ЗапрашиваемыйТекст", ЗапрашиваемыйТекст);
	ДопПараметры.Вставить("Печенька", Печенька);

КонецПроцедуры

Процедура РегистрацияКнигаВК_Пред(ПараметрыЗапроса, ДопПараметры)
	
    Актор = Справочники.Пользователи.ЭтотПользователь;
    
    ПользовательТестирования = Актор.ПолучитьОбъект();
	
	ПараметрыЗапроса.Вставить("code", ПользовательТестирования.VK); 
    ДопПараметры.Вставить("VK", ПользовательТестирования.VK);
    
    ПользовательТестирования.VK = "";
    ПользовательТестирования.Записать();

	Печенька = ПараметрыЗапроса["uuid"];
	
	Если СтрНайти(Печенька, "_")  > 0 Тогда
		
		МассивЗапрос    = СтрРазделить(Печенька, "_", Истина);
		Печенька        = МассивЗапрос[0];
		КодКниги        = МассивЗапрос[1];
		
	Иначе
		
		ВызватьИсключение "Не найден код книги";
		
	КонецЕсли;
	
	ЗапрашиваемыйТекст = Справочники.Произведения.НайтиПоКоду(вРег(КодКниги));
	ДопПараметры.Вставить("ЗапрашиваемыйТекст", ЗапрашиваемыйТекст);
	ДопПараметры.Вставить("Печенька", Печенька);

КонецПроцедуры

Процедура КнигаПоКодуВК_Пред(ТелоЗапроса, ДопПараметры)
	
	ТелоДвоичное    = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса, "UTF-8");
    СтруктураТела   = МетодыРаботыHttp.JsonВСтруктуру(ТелоДвоичное, "UTF-8");
	Сообщение		= СтруктураТела["object"]["message"];
	
	КодКниги		= Сообщение["text"];
	VK				= Сообщение["peer_id"];
	
	ЗапрашиваемыйТекст = Справочники.Произведения.НайтиПоКоду(вРег(КодКниги));
	ДопПараметры.Вставить("ЗапрашиваемыйТекст"	, ЗапрашиваемыйТекст);
	ДопПараметры.Вставить("VK"					, МетодыРаботыHttp.ЧислоВСтроку(VK));

КонецПроцедуры

Процедура КнигаПоКодуТелеграм_Пред(ТелоЗапроса, ДопПараметры)
	
	ТелоДвоичное    = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса, "UTF-8");
	СтруктураТела   = МетодыРаботыHttp.JsonВСтруктуру(ТелоДвоичное, "UTF-8");
	
	КодКниги 			= СтруктураТела["message"]["text"];
	Telegram			= СтруктураТела["message"]["from"]["id"];
	ЗапрашиваемыйТекст  = Справочники.Произведения.НайтиПоКоду(вРег(КодКниги));

	ДопПараметры.Вставить("ЗапрашиваемыйТекст"	, ЗапрашиваемыйТекст);
	ДопПараметры.Вставить("Telegram"			, МетодыРаботыHttp.ЧислоВСтроку(Telegram));

КонецПроцедуры

#КонецОбласти

#Область МетодыПостобработки

Функция РегистрацияТелеграм_Пост(Ответ, ДопПараметры)
     
    Телеграм    = ДопПараметры.Получить("Telegram");
	Печенька    = ДопПараметры.Получить("Печенька"); 
    
    Если Не ЗначениеЗаполнено(Телеграм) Тогда
		ВызватьИсключение "Не получен ID";	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Не получена Печенька";	
	КонецЕсли;
	
	ПроверкаСеанса(Печенька);
    ПроверкаНовогоПользователя(Телеграм, "Telegram");
    
    Возврат Истина;

КонецФункции

Функция ВходТелеграм_Пост(Ответ, ДопПараметры)
    
    Печенька = ДопПараметры.Получить("Печенька"); 
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Печенька не передана";
	КонецЕсли;

	ПроверкаСеанса(Печенька);
	
    Возврат Истина;
  
КонецФункции

Функция РегистрацияВК_Пост(Ответ, ДопПараметры)
	
    Печенька    = ДопПараметры.Получить("Печенька"); 
	VK			= ДопПараметры.Получить("VK");
	
	Если Не ЗначениеЗаполнено(VK) Тогда
		ВызватьИсключение "ВК не заполнено";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Печенька не передана";
	КонецЕсли;
	
	ПользовательИБ 	  = МетодыApiСайта.ВернутьПользователяПоCookie(Печенька);
	ПользовательПоВК  = Справочники.Пользователи.НайтиПоРеквизиту("VK", VK); 
	
	Если Не ПользовательИБ = ПользовательПоВК Тогда
		ВызватьИсключение "Пользователь по ВК не равен пользователю сеанса:"
			+ Символы.ПС
			+ "ВК: "
			+ Строка(ПользовательПоВК)
			+ Символы.ПС
			+ "Сеанс: "
			+ Строка(ПользовательИБ);
	КонецЕсли;
	
	ПроверкаСеанса(Печенька);
	ПроверкаНовогоПользователя(VK, "VK");
	
    Возврат Истина;

КонецФункции

Функция ВходВК_Пост(Ответ, ДопПараметры)
	
    Печенька    = ДопПараметры.Получить("Печенька"); 
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Печенька не передана";
	КонецЕсли;
	
	ПроверкаСеанса(Печенька);
	
	Возврат Истина;
	
КонецФункции

Функция РегистрацияКнигаТелеграм_Пост(Ответ, ДопПараметры)
	
	Телеграм    = ДопПараметры.Получить("Telegram");
	Печенька    = ДопПараметры.Получить("Печенька"); 
	Текст    	= ДопПараметры.Получить("ЗапрашиваемыйТекст");
	СоцСеть		= "Telegram";

	Если Не ЗначениеЗаполнено(Телеграм) Тогда
		ВызватьИсключение "Не получен ID";	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Не получена Печенька";	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		ВызватьИсключение "Не получен Текст";	
	КонецЕсли;
	
	ПроверкаКниги(Текст, Телеграм, СоцСеть);
	ПроверкаСеанса(Печенька);
	ПроверкаНовогоПользователя(Телеграм, СоцСеть);
	
	Возврат Истина;

КонецФункции

Функция РегистрацияКнигаВК_Пост(Ответ, ДопПараметры)
	
    Печенька    = ДопПараметры.Получить("Печенька"); 
	VK			= ДопПараметры.Получить("VK");
	Текст    	= ДопПараметры.Получить("ЗапрашиваемыйТекст");
	СоцСеть		= "VK";
	
	Если Не ЗначениеЗаполнено(VK) Тогда
		ВызватьИсключение "ВК не заполнено";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Печенька) Тогда
		ВызватьИсключение "Печенька не передана";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		ВызватьИсключение "Не получен Текст";	
	КонецЕсли;

	ПользовательИБ 	  = МетодыApiСайта.ВернутьПользователяПоCookie(Печенька);
	ПользовательПоВК  = Справочники.Пользователи.НайтиПоРеквизиту("VK", VK); 
	
	Если Не ПользовательИБ = ПользовательПоВК Тогда
		ВызватьИсключение "Пользователь по ВК не равен пользователю сеанса:"
			+ Символы.ПС
			+ "ВК: "
			+ Строка(ПользовательПоВК)
			+ Символы.ПС
			+ "Сеанс: "
			+ Строка(ПользовательИБ);
	КонецЕсли;
	
	ПроверкаКниги(Текст, VK, СоцСеть);
	ПроверкаСеанса(Печенька);
	ПроверкаНовогоПользователя(VK, "VK");
	
    Возврат Истина;

КонецФункции

Функция КнигаПоКодуВК_Пост(Ответ, ДопПараметры)
	
	ЗапрашиваемыйТекст  = ДопПараметры.Получить("ЗапрашиваемыйТекст");
	VK					= ДопПараметры.Получить("VK");
	СоцСеть				= "VK";
	
	ПроверкаКниги(ЗапрашиваемыйТекст, VK, СоцСеть);
	
	Возврат Истина;
	
КонецФункции

Функция КнигаПоКодуТелеграм_Пост(Ответ, ДопПараметры)
	
	ЗапрашиваемыйТекст  = ДопПараметры.Получить("ЗапрашиваемыйТекст");
	Telegram			= ДопПараметры.Получить("Telegram");
	СоцСеть				= "Telegram";
	
	ПроверкаКниги(ЗапрашиваемыйТекст, Telegram, СоцСеть);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроверки

Процедура ПроверкаСеанса(Знач Печенька)
	
	ПользовательИБ = МетодыApiСайта.ВернутьПользователяПоCookie(Печенька);
	
	Если ЗначениеЗаполнено(ПользовательИБ) Тогда
		
		МЗ = РегистрыСведений.АктивныеСеансы.СоздатьМенеджерЗаписи();
		МЗ.Cookie       = Печенька;
		МЗ.Пользователь = ПользовательИБ;
		МЗ.Удалить();
		
	Иначе
		
		ВызватьИсключение "Сеанс не создан. Cookie = '" + Печенька + "'";
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаНовогоПользователя(Знач ID, Знач СоцСеть)
	
	ПользовательИБ  = Справочники.Пользователи.НайтиПоРеквизиту(СоцСеть, ID); 
	   
    Если ЗначениеЗаполнено(ПользовательИБ) Тогда
        
        ПользовательИБ.ПолучитьОбъект().Удалить();
        
        ПользовательТестирования = Справочники.Пользователи.ЭтотПользователь.ПолучитьОбъект();
        ПользовательТестирования[СоцСеть] = ID;
        ПользовательТестирования.Записать();
        
    Иначе 
        
        ВызватьИсключение "Пользователь не зарегистрирован. ID = '" + ID + "'";
        
    КонецЕсли;

КонецПроцедуры

Процедура ПроверкаКниги(Знач Книга, Знач ID, Знач СоцСеть)
	
	ПользовательИБ  = Справочники.Пользователи.НайтиПоРеквизиту(СоцСеть, ID);
	
	Если Не ЗначениеЗаполнено(ПользовательИБ) Тогда
		ВызватьИсключение "Пользователь с таким ID не найден";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    ПотоковоеЧтениеСрезПоследних.Текст КАК Текст,
	|    ПотоковоеЧтениеСрезПоследних.Слов КАК Слов
	|ИЗ
	|    РегистрСведений.ПотоковоеЧтение КАК ПотоковоеЧтениеСрезПоследних
	|ГДЕ
	|    ПотоковоеЧтениеСрезПоследних.Пользователь = &Чат
	|    И ПотоковоеЧтениеСрезПоследних.Текст <> ЗНАЧЕНИЕ(Справочник.Произведения.Оповещение)
	|
	|УПОРЯДОЧИТЬ ПО
	|    ПотоковоеЧтениеСрезПоследних.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Чат", ПользовательИБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если Не ВыборкаДетальныеЗаписи.Текст = Книга Тогда
			ВызватьИсключение "Последний текст не равен запрашиваемому";
		КонецЕсли;
		
		МЗ = РегистрыСведений.ПотоковоеЧтение.СоздатьМенеджерЗаписи();
		МЗ.Пользователь = ПользовательИБ;
		МЗ.Текст		= Книга;
		МЗ.Удалить();
		
	Иначе
		
		ВызватьИсключение "У пользователя нет текстов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти