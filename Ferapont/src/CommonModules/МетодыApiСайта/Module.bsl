#Область ПрограммныйИнтерфейс

// Обработка POST запросов от телеграм бота
// 
// Параметры:
//  Запрос - Строка - Запрос JSON
Процедура POST_ТелеграмБот(Знач Запрос) Экспорт
	
	Попытка
		
		СтруктураПараметров       = ШаблонСтруктурыПараметровТелеграм();
		ТелоСтрока = Запрос;
		
		ЧтениеJSON     = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоСтрока);
		ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
		
		Если ОтветОбъект.Свойство("message") Тогда
			
			ПолучитьСтруктуруПараметровИзСообщения(ОтветОбъект, СтруктураПараметров);
			
		ИначеЕсли ОтветОбъект.Свойство("callback_query") Тогда
			
			ПолучитьСтруктуруПараметровИзКлавиатуры(ОтветОбъект, СтруктураПараметров);
			
		ИначеЕсли  ОтветОбъект.Свойство("my_chat_member") Тогда
			
			ПолучитьСтруктуруПараметровИзСтатуса(ОтветОбъект, СтруктураПараметров);
			Возврат;    
			
		Иначе
			
			ИнструментарийВызовСервера.ЗаписьВЖурналИсключений("Не message и не my_chat_memebr в запросе от Telegram"
			, ТелоСтрока);
			Возврат;
			
		КонецЕсли;
		
		МетодыБота.ОбработатьВходящееСообщение(СтруктураПараметров);
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Запрос);
	КонецПопытки;
	
КонецПроцедуры

// Обработка POST запросов от ВК бота
// 
// Параметры:
//  Запрос - Строка - Запрос
Процедура POST_ВКБот(Знач Запрос) Экспорт
	
	Попытка
		
		ЧтениеJSON    = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Запрос);
		ОтветОбъект   = ПрочитатьJSON(ЧтениеJSON);
		
		Откуда  = Строка(ОтветОбъект.object.message.from_id);
		Куда    = Строка(ОтветОбъект.object.message.peer_id);
		
		Если Откуда <> Куда Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторПользователя     = Строка(ОтветОбъект.object.message.from_id);
		ИдентификаторЧата             = ОтветОбъект.object.message.conversation_message_id;
		ТекстСообщения                = СокрЛП(ОтветОбъект.object.message.text);
		Секрет                        = ОтветОбъект.secret;
		
		Попытка
			ДанныеПользователя      = МетодыБота.ПолучитьДанныеПользователя(ИдентификаторПользователя);
			ИмяПользователя			= ДанныеПользователя["first_name"] + " " + ДанныеПользователя["last_name"];
		Исключение
			ИмяПользователя         = "Новый";
		КонецПопытки;
		
		СтруктураПараметров           = Новый Структура;
		СтруктураПараметров.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
		СтруктураПараметров.Вставить("ИдентификаторЧата"		, ИдентификаторЧата);
		СтруктураПараметров.Вставить("ТекстСообщения"			, ТекстСообщения);
		СтруктураПараметров.Вставить("ВидСоцСети"				, ПредопределенноеЗначение("Перечисление.СоцСети.VK"));
		СтруктураПараметров.Вставить("ИмяПользователя"			, ИмяПользователя);
		СтруктураПараметров.Вставить("Секрет"					, Секрет);
		СтруктураПараметров.Вставить("Никнейм"					, "");
		
		МетодыБота.ОбработатьВходящееСообщение(СтруктураПараметров);
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Запрос);
	КонецПопытки;
	
КонецПроцедуры

// Обработка GET запросов сайта при нажатии кнопок отправки книг
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
Процедура GET_ОбработатьНачало(Знач Данные) Экспорт
	
	Попытка
		
		_Данные				 = ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		Печенька             = _Данные.Получить("cookie");
		Количество           = _Данные.Получить("book");
		Назначение           = _Данные.Получить("social");
		ПользовательИБ       = ВернутьПользователяПоCookie(Печенька);
		
		ПоляПользователя     = ИнструментарийВызовСервера.ЗначенияРеквизитовОбъекта(ПользовательИБ
		, "Telegram,VK,РазрешилПисатьVK");
		
		ЗапретТГ = (Назначение = "tg" 
		И Не ЗначениеЗаполнено(ПоляПользователя.Telegram));
		ЗапретВК = (Назначение = "vk" 
		И (Не ЗначениеЗаполнено(ПоляПользователя.VK) Или Не ПоляПользователя.РазрешилПисатьVK));
		
		Если ЗапретТГ ИЛИ ЗапретВК Тогда        
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров            = Новый Структура;
		СтруктураПараметров.Вставить("ИмяПользователя"      , "Новый");
		СтруктураПараметров.Вставить("ТекстСообщения"       , Количество);
		СтруктураПараметров.Вставить("Никнейм"              , "");
		СтруктураПараметров.Вставить("Секрет"               
		, ИнструментарийВызовСервера.ЗначениеРеквизитаОбъекта(Справочники.Сообщества.Athenaeum, "ВК_communitysecret"));
		
		Если Назначение = "tg" Тогда
			
			Telegram = МетодыРаботыHttp.ЧислоВСтроку(ПоляПользователя.Telegram);
			
			СтруктураПараметров.Вставить("ИдентификаторПользователя", Telegram);
			СтруктураПараметров.Вставить("ИдентификаторЧата"        , Telegram);    
			СтруктураПараметров.Вставить("ВидСоцСети"               
			, ПредопределенноеЗначение("Перечисление.СоцСети.Telegram"));
			
		ИначеЕсли Назначение = "vk" Тогда
			
			VK = МетодыРаботыHttp.ЧислоВСтроку(ПоляПользователя.VK); 
			
			СтруктураПараметров.Вставить("ИдентификаторПользователя", VK);
			СтруктураПараметров.Вставить("ИдентификаторЧата"        , VK);    
			СтруктураПараметров.Вставить("ВидСоцСети"               
			, ПредопределенноеЗначение("Перечисление.СоцСети.VK"));
			
		Иначе
			
			ИнструментарийВызовСервера.ЗаписьВЖурналИсключений("SendBook без Social"
			, Данные);
			
			Возврат;
			
		КонецЕсли;
		
		МетодыБота.ОбработатьВходящееСообщение(СтруктураПараметров);
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
	КонецПопытки;
	
КонецПроцедуры

// Обработка GET запросов сайта при открытии его как Telegram Mini App
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
Процедура GET_MiniApp(Знач Данные) Экспорт
	
	Попытка
		
		_Данные				= ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		Печенька     		= _Данные.Получить("cookie");		
		ДанныеПользователя 	= ОбработатьДанныеTMA(_Данные);
		
		Если ДанныеПользователя["passed"] Тогда
			
			ИнформацияПользователя = ДанныеПользователя["user"];
			ИнформацияПользователя = МетодыРаботыHttp.JsonВСтруктуру(
			ПолучитьДвоичныеДанныеИзСтроки(ИнформацияПользователя));
			
			ID 			    = МетодыРаботыHttp.ЧислоВСтроку(ИнформацияПользователя["id"]);	
			ПользовательИБ 	= Справочники.Пользователи.НайтиПоРеквизиту("Telegram", ID);
			
			Если Не ЗначениеЗаполнено(ПользовательИБ) И ЗначениеЗаполнено(ID) Тогда
				
				ИмяПользователя = ИнформацияПользователя["first_name"] 
				+ " " 
				+ ИнформацияПользователя["last_name"];
				
				НовыйПользователь                         = Справочники.Пользователи.СоздатьЭлемент();
				НовыйПользователь.ПерсональныеНастройки   = Справочники.ПерсональныеНастройки.Инициализировать(ИмяПользователя);
				НовыйПользователь.Telegram                = ID;
				НовыйПользователь.Наименование            = ИмяПользователя;
				НовыйПользователь.ДатаРегистрации         = ТекущаяДатаСеанса();
				НовыйПользователь.Никнейм                 = ИнформацияПользователя["username"];
				НовыйПользователь.Записать();
				
				ПользовательИБ = НовыйПользователь.Ссылка;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПользовательИБ) Тогда
				
				МЗ = РегистрыСведений.АктивныеСеансы.СоздатьМенеджерЗаписи();
				МЗ.Cookie       = Печенька;
				МЗ.Пользователь = ПользовательИБ;
				МЗ.Дата         = ТекущаяДатаСеанса();
				МЗ.Записать(Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
		
	КонецПопытки;
	
КонецПроцедуры

// Обработка входа через VK ID с возвратом адреса для редиректа
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
// 
// Возвращаемое значение:
//  Структура -  GET ВКЛогин:
// * code - Число - Код ответа для редиректа
// * headers - Структура - Структура заголовков:
// ** Location - Строка - Значение заголовка редиректа 
Функция GET_ВКЛогин(Знач Данные) Экспорт
	
	Ответ     = Новый Структура;
	Заголовки = Новый Структура;
	
	Ответ.Вставить("code", 307);
	Заголовки.Вставить("Location", "https://athenaeum.digital/profile");
	
	Попытка
		
		_Данные		= ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		Токен       = _Данные.Получить("code");
		Печенька    = _Данные.Получить("uuid");
		КодКниги    = "";
		
		Если СтрНайти(Печенька, "_") > 0 Тогда
			
			МассивПараметра = СтрРазделить(Печенька, "_", Истина);
			Печенька        = МассивПараметра[0];
			КодКниги        = ?(МассивПараметра.Количество() > 1, МассивПараметра[1], "");
			
		КонецЕсли;
		
		КодВК       = МетодыБота.АвторизоватьПользователяНаСайте(Токен, Печенька, КодКниги);
		Редирект    = 302;
		
		Если КодВК = Редирект Тогда
			Заголовки.Вставить("Location", "https://vk.com/im?sel=-218704372"); 
		КонецЕсли;
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
	КонецПопытки;
	
	Ответ.Вставить("headers", Заголовки);
	
	Возврат Ответ;
	
КонецФункции

// Возврат данных профиля пользователя на сайт по Cookie
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
// 
// Возвращаемое значение:
//  Структура -  GET данные пользователя:
// * code - Число - Код ответа http
// * data - Строка - Информация о пользователе в формате JSON 
Функция GET_ДанныеПользователя(Знач Данные) Экспорт
	
	Ответ     = Новый Структура;
	Code	  = "code";
	
	Попытка
		
		Ответ.Вставить(Code, 200);
		
		_Данные	  = ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		Печенька  = _Данные.Получить("cookie");    // Строка
		Действие  = _Данные.Получить("action");    // Строка
		
		Если Печенька = Неопределено Тогда
			Ответ.Вставить(Code, 400);        
			Возврат Ответ;
		КонецЕсли;
		
		Если Действие = "logout" Тогда
			
			ПользовательВыхода = ВернутьПользователяПоCookie(Печенька);
			
			МЗ                 = РегистрыСведений.АктивныеСеансы.СоздатьМенеджерЗаписи();
			МЗ.Cookie          = Печенька;
			МЗ.Пользователь    = ПользовательВыхода;    
			МЗ.Удалить();
			
			Ответ.Вставить(Code, 400);
			
		Иначе
			
			СтруктураПользователя = ВернутьДанныеПользователя(Печенька);
			
			Если ЗначениеЗаполнено(СтруктураПользователя) Тогда
				ЗапросJSON = МетодыРаботыHttp.JSONСтрокой(СтруктураПользователя);
				Ответ.Вставить("data", ЗапросJSON);
			Иначе
				Ответ.Вставить(Code, 400);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
	КонецПопытки;
	
	//@skip-check constructor-function-return-section
	Возврат Ответ;
	
КонецФункции

// Проверка отсутствия дублирования uuid для разных сеансов
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
// 
// Возвращаемое значение:
//  Число -  Код ответа http, определяющий, свободен ли присланный uuid
Функция GET_ПроверитьПеченье(Знач Данные) Экспорт
	
	Ответ   = 200;	
	_Данные	= ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
	
	Попытка
		
		Печенька        = _Данные.Получить("cookie");
		ПользовательИБ  = ВернутьПользователяПоCookie(Печенька);
		
		Если ЗначениеЗаполнено(ПользовательИБ) Тогда
			Ответ = 400;
		КонецЕсли;
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возврат списка чтения пользователя
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
// 
// Возвращаемое значение:
//  Строка -  JSON со списком чтения
Функция GET_СписокЧтения(Знач Данные) Экспорт
	
	Попытка
		
		_Данные	= ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		
		Печенька         = _Данные.Получить("cookie");
		Количество       = _Данные.Получить("count");
		ПользовательИБ   = ВернутьПользователяПоCookie(Печенька);
		МассивКниг       = ВернутьСписокЧтения(ПользовательИБ, Количество);
		
		JSONОтвет = МетодыРаботыHttp.JSONСтрокой(МассивКниг);
		
	Исключение
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
		Возврат "";
	КонецПопытки;
	
	Возврат JSONОтвет;
	
КонецФункции

// Прогресс пользователя.
// 
// Параметры:
//  Данные - Строка - Параметры URL строкой через &
// 
// Возвращаемое значение:
//  Строка -  JSON данные о прогрессе
Функция GET_ПрогрессПользователя(Знач Данные) Экспорт
	
	Попытка 
		
		amount           = "amount";
		total            = "total";
		
		_Данные	         = ИнструментарийВызовСервера.ПараметрыЗапросаВСоответствие(Данные);
		Печенька         = _Данные.Получить("cookie");
		НомерКниги       = _Данные.Получить("book");    
		КнигаПоКоду      = Справочники.Произведения.НайтиПоКоду(НомерКниги);
		
		ПользовательИБ   = ВернутьПользователяПоCookie(Печенька);
		ДанныеПоКниге    = ВернутьСписокЧтения(ПользовательИБ, , КнигаПоКоду);
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("autorized", ?(ЗначениеЗаполнено(ПользовательИБ), Истина, Ложь));
		
		Если Не ДанныеПоКниге.Количество() = 0 Тогда    
			СтруктураОтвета.Вставить(amount   , ДанныеПоКниге[amount]);
			СтруктураОтвета.Вставить(total    , ДанныеПоКниге[total]);
		Иначе
			СтруктураОтвета.Вставить(amount   , "0");    
			СтруктураОтвета.Вставить(total    , КнигаПоКоду.Слов);
		КонецЕсли; 
		
		ОтветJson = МетодыРаботыHttp.JSONСтрокой(СтруктураОтвета);
			
		Возврат ОтветJson;
		
	Исключение 
		ИнструментарийВызовСервера.ЗаписьВЖурналИсключений(ОписаниеОшибки(), Данные);
		Возврат "";
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает пользователя активного сеанса по Cookie
// 
// Параметры:
//  Печенька - Строка - Печенька
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи -  пользователь сеанса
Функция ВернутьПользователяПоCookie(Знач Печенька) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    АктивныеСеансы.Пользователь КАК Пользователь
	|ИЗ
	|    РегистрСведений.АктивныеСеансы КАК АктивныеСеансы
	|ГДЕ
	|    АктивныеСеансы.Cookie = &Печенька";
	
	Запрос.УстановитьПараметр("Печенька", Печенька);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Пользователь;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Вернуть данные пользователя по Cookie.
// 
// Параметры:
//  Печенька - Строка - Печенька
// 
// Возвращаемое значение:
//  Структура - Вернуть данные пользователя:
// * name - Строка - Имя
// * id - Строка - Идентификатор
// * status - Строка - ok/not_found
Функция ВернутьДанныеПользователя(Знач Печенька) Экспорт
	
	НомерДняНедели = ДеньНедели(ТекущаяДатаСеанса());
	ДеньНедели     = ИнструментарийВызовСервера.ВернутьДеньНедели(НомерДняНедели);
	МассивПоДням   = Новый Массив;
	МассивДней     = Новый Массив;
	МассивЦелей    = Новый Массив;
	СловЗаНеделю   = 0;
	
	ЗапросБД = Новый Запрос(       
	"ВЫБРАТЬ
	|    АктивныеСеансы.Пользователь КАК Пользователь,
	|    АктивныеСеансы.Пользователь.Наименование КАК ПользовательНаименование,
	|    АктивныеСеансы.Пользователь.Код КАК ПользовательКод,
	|    АктивныеСеансы.Дата КАК Период,
	|    АктивныеСеансы.Пользователь.VK КАК ПользовательVK,
	|    АктивныеСеансы.Пользователь.Telegram КАК ПользовательTelegram,
	|    АктивныеСеансы.Пользователь.ДатаРегистрации КАК ПользовательДатаРегистрации,
	|    СУММА(ВЫБОР
	|        КОГДА ПотоковоеЧтение.Пользователь ЕСТЬ NULL
	|            ТОГДА 0
	|        ИНАЧЕ 1
	|    КОНЕЦ) КАК Завершенные,
	|    АктивныеСеансы.Пользователь.ПерсональныеНастройки.ДневнаяЦель КАК Цель,
	|    АктивныеСеансы.Пользователь.ПерсональныеНастройки.Оповещения КАК Оповещания
	|ПОМЕСТИТЬ ВТ_Пользователь
	|ИЗ
	|    РегистрСведений.АктивныеСеансы КАК АктивныеСеансы
	|        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПотоковоеЧтение КАК ПотоковоеЧтение
	|        ПО АктивныеСеансы.Пользователь = ПотоковоеЧтение.Пользователь
	|        И ПотоковоеЧтение.Завершена
	|ГДЕ
	|    АктивныеСеансы.Cookie = &Cookie И АктивныеСеансы.Cookie <> """"
	|СГРУППИРОВАТЬ ПО
	|    АктивныеСеансы.Пользователь,
	|    АктивныеСеансы.Дата,
	|    АктивныеСеансы.Пользователь.Наименование,
	|    АктивныеСеансы.Пользователь.Код,
	|    АктивныеСеансы.Пользователь.VK,
	|    АктивныеСеансы.Пользователь.Telegram,
	|    АктивныеСеансы.Пользователь.ДатаРегистрации,
	|    АктивныеСеансы.Пользователь.ПерсональныеНастройки.ДневнаяЦель,
	|    АктивныеСеансы.Пользователь.ПерсональныеНастройки.Оповещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 7
	|    ЕСТЬNULL(ДневнойПрогресс.КоличествоСлов, 0) КАК КоличествоСлов,
	|    ЕСТЬNULL(ДневнойПрогресс.День, &ДеньНедели) КАК День,
	|    ЕСТЬNULL(ДневнойПрогресс.Дата, &ТекущаяДата) КАК Дата,
	|    ВТ_Пользователь.Цель КАК Цель
	|ПОМЕСТИТЬ ВТ_Неделя
	|ИЗ
	|    ВТ_Пользователь КАК ВТ_Пользователь
	|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДневнойПрогресс КАК ДневнойПрогресс
	|        ПО ВТ_Пользователь.Пользователь = ДневнойПрогресс.Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|    ДневнойПрогресс.Дата УБЫВ");
	
	ЗапросБД.УстановитьПараметр("Cookie"        , ?(Печенька = "null", "", Печенька));
	ЗапросБД.УстановитьПараметр("ТекущаяДата"   , ТекущаяДатаСеанса());
	ЗапросБД.УстановитьПараметр("ДеньНедели"    , ДеньНедели);
	
	РезультатЗапроса             = ЗапросБД.ВыполнитьПакетСПромежуточнымиДанными();    
	ВыборкаДетальныеЗаписи       = РезультатЗапроса[0].Выбрать();
	ВыборкаПоДням                = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаПоДням.Следующий() Цикл
		
		МассивДней.Вставить(0        , ВыборкаПоДням.День);    
		МассивПоДням.Вставить(0      , ВыборкаПоДням.КоличествоСлов);
		
		СловЗаНеделю = СловЗаНеделю + ВыборкаПоДням.КоличествоСлов;
		
		Если Не ВыборкаПоДням.Цель = 0 Тогда
			МассивЦелей.Вставить(0, ВыборкаПоДням.Цель);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЕстьVK = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПользовательVK), Истина, Ложь);
		ЕстьTG = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПользовательTelegram), Истина, Ложь);
		
		СтруктураПользователя = Новый Структура;
		СтруктураПользователя.Вставить("name"        , ВыборкаДетальныеЗаписи.ПользовательНаименование);
		СтруктураПользователя.Вставить("id"          , ВыборкаДетальныеЗаписи.ПользовательКод);
		СтруктураПользователя.Вставить("status"      , "ok");
		СтруктураПользователя.Вставить("days"        , МассивДней);
		СтруктураПользователя.Вставить("data"        , МассивПоДням);
		СтруктураПользователя.Вставить("week"        , СловЗаНеделю);
		СтруктураПользователя.Вставить("target"      , МассивЦелей);
		СтруктураПользователя.Вставить("total"       , ПолучитьОбщееЧислоСлов(ВыборкаДетальныеЗаписи.Пользователь));
		СтруктураПользователя.Вставить("VK"          , ЕстьVK);
		СтруктураПользователя.Вставить("Telegram"    , ЕстьTG);
		СтруктураПользователя.Вставить("regdate"     , ВыборкаДетальныеЗаписи.ПользовательДатаРегистрации);
		СтруктураПользователя.Вставить("fin"         , ВыборкаДетальныеЗаписи.Завершенные);
		СтруктураПользователя.Вставить("alert"       , Строка(ВыборкаДетальныеЗаписи.Оповещания));
		
	Иначе
		
		СтруктураПользователя = Новый Структура;
		СтруктураПользователя.Вставить("name"        , "");
		СтруктураПользователя.Вставить("id"          , "");
		СтруктураПользователя.Вставить("status"      , "not_found");    
		
	КонецЕсли;
	
	Возврат СтруктураПользователя;
	
КонецФункции

// Получить общее число прочитанных слов пользователя.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
// 
// Возвращаемое значение:
//  Число -  общее число слов
Функция ПолучитьОбщееЧислоСлов(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    СУММА(ВЫБОР
	|            КОГДА ЕСТЬNULL(ПотоковоеЧтение.Завершена, ЛОЖЬ)
	|                ТОГДА ЕСТЬNULL(ПотоковоеЧтение.Текст.Слов, 0)
	|            ИНАЧЕ ЕСТЬNULL(ПотоковоеЧтение.МаксимумСлов, 0)
	|        КОНЕЦ) КАК Слов
	|ИЗ
	|    РегистрСведений.ПотоковоеЧтение КАК ПотоковоеЧтение
	|ГДЕ
	|    ПотоковоеЧтение.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И Не ВыборкаДетальныеЗаписи.Слов = NULL Тогда
		Возврат ВыборкаДетальныеЗаписи.Слов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Обработать данные TMA.
// 
// Параметры:
//  СтруктураДанных - Структура из Строка - Структура входных данных
// 
// Возвращаемое значение:
//  Соответствие из Строка- Данные пользователя Telegram
Функция ОбработатьДанныеTMA(СтруктураДанных) Экспорт
	
	Ключ  = "WebAppData";
	Хэш   = "";
	Токен = ИнструментарийВызовСервера.ЗначениеРеквизитаОбъекта(Справочники.Сообщества.Athenaeum
	, "TGB_token");
	
	Результат = ИнструментарийВызовСервера.HMACSHA256(
	ПолучитьДвоичныеДанныеИзСтроки(Ключ)
	, ПолучитьДвоичныеДанныеИзСтроки(Токен)); 
	
	ТЗ 			 = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ключ");
	ТЗ.Колонки.Добавить("Значение");
	
	Для Каждого Данные Из СтруктураДанных Цикл
		
		Если Не Данные.Ключ = "cookie" Тогда	
			НоваяСтрока 	= ТЗ.Добавить();		
			НоваяСтрока.Ключ 		= Данные.Ключ;
			НоваяСтрока.Значение 	= Данные.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗ.Сортировать("Ключ");
	
	СоответствиеВозврата = Новый Соответствие;
	DCS 			  	= "";
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		
		Если СтрокаТЗ.Ключ <> "hash" Тогда
			DCS = DCS + СтрокаТЗ.Ключ + "=" + СтрокаТЗ.Значение + Символы.ПС;
			СоответствиеВозврата.Вставить(СтрокаТЗ.Ключ, СтрокаТЗ.Значение); 
		Иначе
			Хэш = СтрокаТЗ.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	DCS 	= Лев(DCS, СтрДлина(DCS) - 1);
	Подпись = ИнструментарийВызовСервера.HMACSHA256(Результат, ПолучитьДвоичныеДанныеИзСтроки(DCS));
	
	Финал = ПолучитьHexСтрокуИзДвоичныхДанных(Подпись);
	
	Если Финал = вРег(Хэш) Тогда
		Ответ = Истина;
	Иначе
		Ответ = Ложь;
	КонецЕсли;
	
	СоответствиеВозврата.Вставить("passed", Ответ);
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Вернуть список чтения.
// 
// Параметры:
//  ПользовательИБ - СправочникСсылка.Пользователи - Пользователь ИБ
//  Количество - Число - Количество книг
//  Книга - СправочникСсылка.Произведения - Книга (если нужна конкретная)
// 
// Возвращаемое значение:
// СправочникСсылка.Произведения, Массив Из СправочникСсылка.Произведения - список или одиночная книга 
Функция ВернутьСписокЧтения(Знач ПользовательИБ, Знач Количество = "", Знач Книга = "") Экспорт
	
	МассивКниг        = Новый Массив;
	НоваяКнига        = Новый Структура;
	ОдиночнаяКнига    = Ложь;
	
	Если Не ЗначениеЗаполнено(Книга) Тогда
		Книга = Справочники.Произведения.ПустаяСсылка();
	Иначе
		ОдиночнаяКнига = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ" + ?(ЗначениеЗаполнено(Количество), " Первые " + Строка(Количество), "") + "
	|    ПотоковоеЧтение.Текст.Наименование КАК Текст,
	|    ПотоковоеЧтение.Текст.Автор.Наименование КАК Автор,
	|    ПотоковоеЧтение.Текст.Автор.Код Как КодАвтора,
	|    ПотоковоеЧтение.Текст.Код Как ИД,
	|    ПотоковоеЧтение.Текст.Слов Как ВсегоСлов,
	|    ПотоковоеЧтение.Слов Как ПрочитаноСлов,
	|    ПотоковоеЧтение.Дата Как Дата,
	|    ПотоковоеЧтение.Завершена Как Завершена
	|ИЗ
	|    РегистрСведений.ПотоковоеЧтение КАК ПотоковоеЧтение
	|ГДЕ
	|    ПотоковоеЧтение.Пользователь = &Пользователь 
	|    И Не ПотоковоеЧтение.Текст = Значение(Справочник.Произведения.Оповещение)
	|    И Выбор Когда &ОпределеннаяКнига = Значение(Справочник.Произведения.ПустаяСсылка) Тогда Истина
	|    Иначе &ОпределеннаяКнига = ПотоковоеЧтение.Текст Конец
	|
	|УПОРЯДОЧИТЬ ПО
	|    ПотоковоеЧтение.Завершена,
	|    ПотоковоеЧтение.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательИБ);
	Запрос.УстановитьПараметр("ОпределеннаяКнига", Книга);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяКнига = Новый Структура;
		НоваяКнига.Вставить("author"    , ВыборкаДетальныеЗаписи.Автор);
		НоваяКнига.Вставить("author_id" , ВыборкаДетальныеЗаписи.КодАвтора);
		НоваяКнига.Вставить("name"      , ВыборкаДетальныеЗаписи.Текст);
		НоваяКнига.Вставить("id"        , ВыборкаДетальныеЗаписи.ИД);
		НоваяКнига.Вставить("amount"    , МетодыРаботыHttp.ЧислоВСтроку(ВыборкаДетальныеЗаписи.ПрочитаноСлов));
		НоваяКнига.Вставить("total"     , МетодыРаботыHttp.ЧислоВСтроку(ВыборкаДетальныеЗаписи.ВсегоСлов));
		НоваяКнига.Вставить("fin"       , ВыборкаДетальныеЗаписи.Завершена);
		МассивКниг.Добавить(НоваяКнига);
		
	КонецЦикла;
	
	Если Не ОдиночнаяКнига Тогда
		Возврат МассивКниг;
	Иначе
		Возврат НоваяКнига;
	КонецЕсли;
	
КонецФункции

// Шаблон структуры параметров телеграм.
// 
// Возвращаемое значение:
//  Структура -  Шаблон структуры параметров телеграм:
// * ИдентификаторПользователя - Строка - Идентификатор телеграм
// * ИдентификаторЧата - Строка - Идентификатор конкретного чата с пользователем (как правило = ИП)
// * ТекстСообщения - Строка - Сообщение
// * ИмяПользователя - Строка - Имя из телеграм
// * Никнейм - Строка - Никнейм из телеграм 
// * Секрет - Строка - Поле для совместимости с механизмом обработки сообщений ВК, в котором секрет используется
// * ВидСоцСети - ПеречислениеСсылка.СоцСети - Определитель телеграма
Функция ШаблонСтруктурыПараметровТелеграм() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИдентификаторПользователя", "");
	СтруктураПараметров.Вставить("ИдентификаторЧата"        , "");
	СтруктураПараметров.Вставить("ТекстСообщения"           , "");
	СтруктураПараметров.Вставить("ИмяПользователя"          , "");
	СтруктураПараметров.Вставить("Никнейм"                  , "");
	СтруктураПараметров.Вставить("Секрет"                   , "");
	СтруктураПараметров.Вставить("ВидСоцСети"               
	, ПредопределенноеЗначение("Перечисление.СоцСети.Telegram"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПолучитьСтруктуруПараметровИзСообщения(Знач ОтветОбъект, СтруктураПараметров)
	
	Никнейм    = ?(ОтветОбъект.message.from.Свойство("username"), ОтветОбъект.message.from.username, "");
	
	ИдентификаторПользователя     = ОтветОбъект.message.from.id;
	ИдентификаторЧата             = ОтветОбъект.message.chat.id;
	ТекстСообщения                = ?(ОтветОбъект.message.Свойство("text"), ОтветОбъект.message.text, "Шляпадата");
	ИмяПользователя               = 
	?(ОтветОбъект.message.from.Свойство("first_name"), ОтветОбъект.message.from.first_name + " ", "") 
	+ ?(ОтветОбъект.message.from.Свойство("last_name"), ОтветОбъект.message.from.last_name, "");
	
	СтруктураПараметров.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
	СтруктураПараметров.Вставить("ИдентификаторЧата"        , ИдентификаторЧата);
	СтруктураПараметров.Вставить("ТекстСообщения"           , ТекстСообщения);
	СтруктураПараметров.Вставить("ИмяПользователя"          , ИмяПользователя);
	СтруктураПараметров.Вставить("Никнейм"                  , Никнейм);
	
КонецПроцедуры

Процедура ПолучитьСтруктуруПараметровИзСтатуса(Знач ОтветОбъект, СтруктураПараметров)
	
	FromID              = МетодыРаботыHttp.ЧислоВСтроку(ОтветОбъект.my_chat_member.from.id);
	НовыйСтатус         = ОтветОбъект.my_chat_member.new_chat_member.status;
	ПользовательИБ      = Справочники.Пользователи.НайтиПоРеквизиту("Telegram", FromID);
	
	ОбъектПользователь  = ПользовательИБ.ПолучитьОбъект();
	
	Если НовыйСтатус = "kicked" Тогда
		ОбъектПользователь.ТГ_БотОстановлен = Истина;
	Иначе
		ОбъектПользователь.ТГ_БотОстановлен = Ложь;
	КонецЕсли;
	
	ОбъектПользователь.Записать();
	
КонецПроцедуры

Процедура ПолучитьСтруктуруПараметровИзКлавиатуры(Знач ОтветОбъект, СтруктураПараметров)
	
	Никнейм    = ?(ОтветОбъект.callback_query.from.Свойство("username"), ОтветОбъект.callback_query.from.username, "");
	
	ИдентификаторПользователя     = ОтветОбъект.callback_query.from.id;
	ИдентификаторЧата             = ОтветОбъект.callback_query.message.chat.id;
	ТекстСообщения                = ОтветОбъект.callback_query.data;
	ИмяПользователя               = ?(ОтветОбъект.callback_query.from.Свойство("first_name"),
	ОтветОбъект.callback_query.from.first_name + " ", "") + ?(ОтветОбъект.callback_query.from.Свойство("last_name"),
	ОтветОбъект.callback_query.from.last_name, "");
	
	СтруктураПараметров.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
	СтруктураПараметров.Вставить("ИдентификаторЧата"        , ИдентификаторЧата);
	СтруктураПараметров.Вставить("ТекстСообщения"           , ТекстСообщения);
	СтруктураПараметров.Вставить("ИмяПользователя"          , ИмяПользователя);
	СтруктураПараметров.Вставить("Никнейм"                  , Никнейм);
	
КонецПроцедуры

#КонецОбласти